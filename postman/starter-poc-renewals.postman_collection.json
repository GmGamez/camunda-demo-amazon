{
	"info": {
		"_postman_id": "e7b60b55-d179-48b1-8a2a-6b7480e719d1",
		"name": "starter-poc-renewals",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Send-Transactional-Email",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "subject ",
							"value": "test",
							"type": "text"
						},
						{
							"key": "text",
							"value": "test some text here",
							"type": "text"
						},
						{
							"key": "from",
							"value": "lungu77@gmail.com",
							"type": "text"
						},
						{
							"key": "to",
							"value": "test@test.com",
							"type": "text"
						},
						{
							"key": "SPF",
							"value": "spf_1234567",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:8080/parse",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"parse"
					]
				},
				"description": "Imitates the transaction email from a transactional email provider."
			},
			"response": []
		},
		{
			"name": "get-process-definition",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"A credit-balance task is returned\", () => {",
							"     pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"});",
							"",
							"var processName = \"PaymentProcess\";",
							"",
							"pm.test(\"Test if Payment Process exists\", function () { ",
							"    ",
							"    pm.expect(responseBody.has(processName)).to.equal(true); ",
							"    ",
							"    var data = JSON.parse(responseBody);",
							"",
							"    var reducedData = [];",
							"    data.forEach(function (obj, index){",
							"        ",
							"            if(obj.key.includes(processName)){",
							"                reducedData.push(obj);",
							"            } ",
							"        }",
							"    )",
							"    ",
							"    obj = reducedData.reduce(function (reducer, current){",
							"        console.log( current.version );",
							"        if (current.version > reducer.version)",
							"            return current;",
							"        else",
							"            return reducer;",
							"    })    ",
							"    ",
							"    pm.environment.set(\"key\", obj.key);",
							"    console.log( \"Process Key Set: \"",
							"        +pm.environment.get(\"key\") );",
							"",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/engine-rest/engine/default/process-definition/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"engine-rest",
						"engine",
						"default",
						"process-definition",
						""
					]
				},
				"description": "Create process instances for demo"
			},
			"response": []
		},
		{
			"name": "start-process",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"A valid response is reuturned\", () => {",
							"     pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"});",
							"",
							"pm.test(\"Test if Payment Process Started and has ProcessId\", function () { ",
							"    ",
							"    var data = JSON.parse(responseBody);",
							"",
							"    console.log(` Response: Process Id =  ${data.id}` );",
							"",
							"",
							"    var jsonData = pm.response.json();",
							"    console.log(`Response: ${jsonData.id}`);",
							"    ",
							"    pm.response.to.have.jsonBody(\"id\"); ",
							"",
							"});",
							"",
							"",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"businessKey\" : \"{{$guid}}\",\n\t\"variables\": {\n\t\t\"remainingDays\": \n\t\t{\n\t\t\t\"value\": 10\n\t\t},\n\t\t\"renewalConfirmed\": \n\t\t{\n\t\t\t\"value\": false\n\t\t},\n\t\t\"leaseExpirationDate\": \n\t\t{\n\t\t\t\"value\": 100\n\t\t},\n\t\t\"leaseExpirationBufferDays\": \n\t\t{\n\t\t\t\"value\": 50\n\t\t}\n\t\t\n\t}\n}\n"
				},
				"url": {
					"raw": "http://localhost:8080/rest/process-definition/key/lease-renewal/start",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"rest",
						"process-definition",
						"key",
						"lease-renewal",
						"start"
					]
				},
				"description": "Starts a process instance with the rest API"
			},
			"response": []
		},
		{
			"name": "Auto Import",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"A valid response is reuturned\", () => {",
							"     pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"});",
							"",
							"pm.test(\"Test if Payment Process Started and has ProcessId\", function () { ",
							"    ",
							"    var data = JSON.parse(responseBody);",
							"",
							"    console.log(` Response: Process Id =  ${data.id}` );",
							"",
							"",
							"    var jsonData = pm.response.json();",
							"    console.log(`Response: ${jsonData.id}`);",
							"    ",
							"    pm.response.to.have.jsonBody(\"id\"); ",
							"",
							"});",
							"",
							"",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"businessKey\" : \"{{$guid}}\",\n\t\"variables\": {\n\t\t\"remainingDays\": \n\t\t{\n\t\t\t\"value\": 10\n\t\t},\n\t\t\"renewalConfirmed\": \n\t\t{\n\t\t\t\"value\": false\n\t\t},\n\t\t\"leaseExpirationDate\": \n\t\t{\n\t\t\t\"value\": 100\n\t\t},\n\t\t\"leaseExpirationBufferDays\": \n\t\t{\n\t\t\t\"value\": 50\n\t\t}\n\t\t\n\t}\n}\n"
				},
				"url": {
					"raw": "http://localhost:8080/autoimport",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"autoimport"
					]
				},
				"description": "Starts a process instance with the rest API"
			},
			"response": []
		},
		{
			"name": "Start Renewal",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/renew/start",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"renew",
						"start"
					]
				},
				"description": "Starts a Lease Renewal based on the date in the Lease (upload from spreadsheet)"
			},
			"response": []
		}
	]
}